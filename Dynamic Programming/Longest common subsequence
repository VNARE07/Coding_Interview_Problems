class Solution:
    
    #Function to find the length of longest common subsequence in two strings.
    def lcs(self,x,y,s1,s2):
        
        # code here
        # creating a dp array
        dp = []
        # initilizing the row settings ie setting the row to one plus the size of the s1
        l1 = [0]*(len(s1)+1)
        # filling the dp table with one plus the size of s2
        # so each cell tells us what is the best thing we can do if we are standing on cell i,j
        # that is what is the longest inceasing subsequence if s = s1[:j+1] and s2 = s2[:i+1]
        # so that on the last cell we can answer our question that what is the lcs of s1 and s2
        for i in range(len(s2)+1):
            dp.append(l1[:])
        for i in range(1,len(s2)+1):
            char = s2[i-1]
            for j in range(1,len(s1)+1):
            # on each cell we just ask one question that if the character are equal on both the strings then what is the best we can do if both the equal characters are removed ie dp[i-1][j-1] + 1
            # if they are unequal then we need to get the max of individual removing one last character form both of the strings individually and removing last character form both the strings
                if s1[j-1] == char:
                # match condition
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                # mismatch condition
                    v1 = max(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])
                    dp[i][j] = v1
        return dp[-1][-1]
