class Solution:
    def isSubsetSum (self, N, arr, sum1):
        # code here
        # defining an empty dp table
        dp = []
        # creating row elements upto the target value and setting the very first value to one
        l1 = [False]*(sum1+1)
        l1[0] = True
        # sorting the set
        arr.sort()
        # filling the dp table
        for i in range(len(arr)+1):
            dp.append(l1[:])
        # trivercing the values in the arr and filling the dp table
        for i in range(1,len(arr)+1):
            val = arr[i-1]
            for j in range(1,sum1+1):
            # In this dp table we are just asking one question if we have a all of the values uptil now so can I reach uptill this value j
                if val > j:
                # if the value is greater than j then take the value which is about is that is same as what is the best we can do without this value.
                    dp[i][j] = dp[i-1][j]
                else:
                # if the value is smaller than j then we can consider this value thus we check this condition i.e what we can do with and without this value
                # and we use or clause to signify that if it is rechable by using the value and without using this value it is the same
                    dif = j - val
                    v1 = dp[i-1][dif] or dp[i-1][j]
                    dp[i][j] = v1
        # then finally we answer the final question that if we have all the values in the subset can i reach the target sum.
        return dp[-1][-1]
